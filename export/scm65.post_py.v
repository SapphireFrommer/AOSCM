/*
###############################################################
#	Generated by:		EnICS SCM Compiler v1.1
#	Generated on:		2018-04-17 15:06:01
#	Design:				scm65
#
#	Dimensions:
#	DATA WIDTH:			16
#	NUM ROWS:			16
#
#	lines in lists:
#	module_scm_text:	81
###############################################################
*/


module read_mux (DOUT, MemoryLatch, RWL);

	//ports
	input [15:0] RWL;
	input [15:0] MemoryLatch;
	output DOUT;

	//wires
	wire [0:0] w4;
	wire DOUT;
	wire [7:0] w1;
	wire [15:0] RWL;
	wire [15:0] w0;
	wire [15:0] MemoryLatch;
	wire [3:0] w2;
	wire [1:0] w3;

	//instances
	INV_X1B_A12TR inv_out(.A(w4[0]), .Y(DOUT));
	NAND2_X1A_A12TR level_1_0(.A(MemoryLatch[0]), .B(RWL[0]), .Y(w0[0]));
	NAND2_X1A_A12TR level_1_1(.A(MemoryLatch[1]), .B(RWL[1]), .Y(w0[1]));
	NAND2_X1A_A12TR level_1_10(.A(MemoryLatch[10]), .B(RWL[10]), .Y(w0[10]));
	NAND2_X1A_A12TR level_1_11(.A(MemoryLatch[11]), .B(RWL[11]), .Y(w0[11]));
	NAND2_X1A_A12TR level_1_12(.A(MemoryLatch[12]), .B(RWL[12]), .Y(w0[12]));
	NAND2_X1A_A12TR level_1_13(.A(MemoryLatch[13]), .B(RWL[13]), .Y(w0[13]));
	NAND2_X1A_A12TR level_1_14(.A(MemoryLatch[14]), .B(RWL[14]), .Y(w0[14]));
	NAND2_X1A_A12TR level_1_15(.A(MemoryLatch[15]), .B(RWL[15]), .Y(w0[15]));
	NAND2_X1A_A12TR level_1_2(.A(MemoryLatch[2]), .B(RWL[2]), .Y(w0[2]));
	NAND2_X1A_A12TR level_1_3(.A(MemoryLatch[3]), .B(RWL[3]), .Y(w0[3]));
	NAND2_X1A_A12TR level_1_4(.A(MemoryLatch[4]), .B(RWL[4]), .Y(w0[4]));
	NAND2_X1A_A12TR level_1_5(.A(MemoryLatch[5]), .B(RWL[5]), .Y(w0[5]));
	NAND2_X1A_A12TR level_1_6(.A(MemoryLatch[6]), .B(RWL[6]), .Y(w0[6]));
	NAND2_X1A_A12TR level_1_7(.A(MemoryLatch[7]), .B(RWL[7]), .Y(w0[7]));
	NAND2_X1A_A12TR level_1_8(.A(MemoryLatch[8]), .B(RWL[8]), .Y(w0[8]));
	NAND2_X1A_A12TR level_1_9(.A(MemoryLatch[9]), .B(RWL[9]), .Y(w0[9]));
	NAND2_X1A_A12TR level_2_0(.A(w0[0]), .B(w0[1]), .Y(w1[0]));
	NAND2_X1A_A12TR level_2_1(.A(w0[2]), .B(w0[3]), .Y(w1[1]));
	NAND2_X1A_A12TR level_2_2(.A(w0[4]), .B(w0[5]), .Y(w1[2]));
	NAND2_X1A_A12TR level_2_3(.A(w0[6]), .B(w0[7]), .Y(w1[3]));
	NAND2_X1A_A12TR level_2_4(.A(w0[8]), .B(w0[9]), .Y(w1[4]));
	NAND2_X1A_A12TR level_2_5(.A(w0[10]), .B(w0[11]), .Y(w1[5]));
	NAND2_X1A_A12TR level_2_6(.A(w0[12]), .B(w0[13]), .Y(w1[6]));
	NAND2_X1A_A12TR level_2_7(.A(w0[14]), .B(w0[15]), .Y(w1[7]));
	NOR2_X1A_A12TR level_3_0(.A(w1[0]), .B(w1[1]), .Y(w2[0]));
	NOR2_X1A_A12TR level_3_1(.A(w1[2]), .B(w1[3]), .Y(w2[1]));
	NOR2_X1A_A12TR level_3_2(.A(w1[4]), .B(w1[5]), .Y(w2[2]));
	NOR2_X1A_A12TR level_3_3(.A(w1[6]), .B(w1[7]), .Y(w2[3]));
	NAND2_X1A_A12TR level_4_0(.A(w2[0]), .B(w2[1]), .Y(w3[0]));
	NAND2_X1A_A12TR level_4_1(.A(w2[2]), .B(w2[3]), .Y(w3[1]));
	NOR2_X1A_A12TR level_5_0(.A(w3[0]), .B(w3[1]), .Y(w4[0]));

endmodule


module rwlBuff_strip (IN, OUT);

	//ports
	input [15:0] IN;
	output [15:0] OUT;

	//wires
	wire [15:0] IN;
	wire [15:0] OUT;

	//instances
	BUFH_X3M_A12TR rwlBuff_0(.A(IN[0]), .Y(OUT[0]));
	BUFH_X3M_A12TR rwlBuff_1(.A(IN[1]), .Y(OUT[1]));
	BUFH_X3M_A12TR rwlBuff_10(.A(IN[10]), .Y(OUT[10]));
	BUFH_X3M_A12TR rwlBuff_11(.A(IN[11]), .Y(OUT[11]));
	BUFH_X3M_A12TR rwlBuff_12(.A(IN[12]), .Y(OUT[12]));
	BUFH_X3M_A12TR rwlBuff_13(.A(IN[13]), .Y(OUT[13]));
	BUFH_X3M_A12TR rwlBuff_14(.A(IN[14]), .Y(OUT[14]));
	BUFH_X3M_A12TR rwlBuff_15(.A(IN[15]), .Y(OUT[15]));
	BUFH_X3M_A12TR rwlBuff_2(.A(IN[2]), .Y(OUT[2]));
	BUFH_X3M_A12TR rwlBuff_3(.A(IN[3]), .Y(OUT[3]));
	BUFH_X3M_A12TR rwlBuff_4(.A(IN[4]), .Y(OUT[4]));
	BUFH_X3M_A12TR rwlBuff_5(.A(IN[5]), .Y(OUT[5]));
	BUFH_X3M_A12TR rwlBuff_6(.A(IN[6]), .Y(OUT[6]));
	BUFH_X3M_A12TR rwlBuff_7(.A(IN[7]), .Y(OUT[7]));
	BUFH_X3M_A12TR rwlBuff_8(.A(IN[8]), .Y(OUT[8]));
	BUFH_X3M_A12TR rwlBuff_9(.A(IN[9]), .Y(OUT[9]));

endmodule


module row_decoder (decoder_in, decoder_out);

	//ports
	input [3:0] decoder_in;
	output [15:0] decoder_out;

	//wires
	wire [15:0] decoder_out;
	wire [3:0] decoder_in;
	wire [15:0] nand_out;
	wire [7:0] PreDec_out;

	//instances
	INV_X1B_A12TR INV_out_0(.A(nand_out[0]), .Y(decoder_out[0]));
	INV_X1B_A12TR INV_out_1(.A(nand_out[1]), .Y(decoder_out[1]));
	INV_X1B_A12TR INV_out_10(.A(nand_out[10]), .Y(decoder_out[10]));
	INV_X1B_A12TR INV_out_11(.A(nand_out[11]), .Y(decoder_out[11]));
	INV_X1B_A12TR INV_out_12(.A(nand_out[12]), .Y(decoder_out[12]));
	INV_X1B_A12TR INV_out_13(.A(nand_out[13]), .Y(decoder_out[13]));
	INV_X1B_A12TR INV_out_14(.A(nand_out[14]), .Y(decoder_out[14]));
	INV_X1B_A12TR INV_out_15(.A(nand_out[15]), .Y(decoder_out[15]));
	INV_X1B_A12TR INV_out_2(.A(nand_out[2]), .Y(decoder_out[2]));
	INV_X1B_A12TR INV_out_3(.A(nand_out[3]), .Y(decoder_out[3]));
	INV_X1B_A12TR INV_out_4(.A(nand_out[4]), .Y(decoder_out[4]));
	INV_X1B_A12TR INV_out_5(.A(nand_out[5]), .Y(decoder_out[5]));
	INV_X1B_A12TR INV_out_6(.A(nand_out[6]), .Y(decoder_out[6]));
	INV_X1B_A12TR INV_out_7(.A(nand_out[7]), .Y(decoder_out[7]));
	INV_X1B_A12TR INV_out_8(.A(nand_out[8]), .Y(decoder_out[8]));
	INV_X1B_A12TR INV_out_9(.A(nand_out[9]), .Y(decoder_out[9]));
	NAND2_X1A_A12TR PostDec_0(.A(PreDec_out[4]), .B(PreDec_out[0]), .Y(nand_out[0]));
	NAND2_X1A_A12TR PostDec_1(.A(PreDec_out[4]), .B(PreDec_out[1]), .Y(nand_out[1]));
	NAND2_X1A_A12TR PostDec_10(.A(PreDec_out[6]), .B(PreDec_out[2]), .Y(nand_out[10]));
	NAND2_X1A_A12TR PostDec_11(.A(PreDec_out[6]), .B(PreDec_out[3]), .Y(nand_out[11]));
	NAND2_X1A_A12TR PostDec_12(.A(PreDec_out[7]), .B(PreDec_out[0]), .Y(nand_out[12]));
	NAND2_X1A_A12TR PostDec_13(.A(PreDec_out[7]), .B(PreDec_out[1]), .Y(nand_out[13]));
	NAND2_X1A_A12TR PostDec_14(.A(PreDec_out[7]), .B(PreDec_out[2]), .Y(nand_out[14]));
	NAND2_X1A_A12TR PostDec_15(.A(PreDec_out[7]), .B(PreDec_out[3]), .Y(nand_out[15]));
	NAND2_X1A_A12TR PostDec_2(.A(PreDec_out[4]), .B(PreDec_out[2]), .Y(nand_out[2]));
	NAND2_X1A_A12TR PostDec_3(.A(PreDec_out[4]), .B(PreDec_out[3]), .Y(nand_out[3]));
	NAND2_X1A_A12TR PostDec_4(.A(PreDec_out[5]), .B(PreDec_out[0]), .Y(nand_out[4]));
	NAND2_X1A_A12TR PostDec_5(.A(PreDec_out[5]), .B(PreDec_out[1]), .Y(nand_out[5]));
	NAND2_X1A_A12TR PostDec_6(.A(PreDec_out[5]), .B(PreDec_out[2]), .Y(nand_out[6]));
	NAND2_X1A_A12TR PostDec_7(.A(PreDec_out[5]), .B(PreDec_out[3]), .Y(nand_out[7]));
	NAND2_X1A_A12TR PostDec_8(.A(PreDec_out[6]), .B(PreDec_out[0]), .Y(nand_out[8]));
	NAND2_X1A_A12TR PostDec_9(.A(PreDec_out[6]), .B(PreDec_out[1]), .Y(nand_out[9]));
	Decoder_2_4 PreDec_0(.decoder_in({decoder_in[1:0]}), .decoder_out({PreDec_out[3:0]}));
	Decoder_2_4 PreDec_1(.decoder_in({decoder_in[3:2]}), .decoder_out({PreDec_out[7:4]}));

endmodule


module Decoder_3_8 (decoder_in, decoder_out);

	//ports
	output [7:0] decoder_out;
	input [2:0] decoder_in;

	//wires
	wire [7:0] decoder_out;
	wire [2:0] decoder_in;

	//instances

endmodule


module Decoder_2_4 (decoder_in, decoder_out);

	//ports
	output [3:0] decoder_out;
	input [1:0] decoder_in;

	//wires
	wire [1:0] decoder_in;
	wire [1:0] in_not;
	wire [3:0] nand_out;
	wire [3:0] decoder_out;

	//instances
	INV_X1B_A12TR INV_out_0(.A(nand_out[0]), .Y(decoder_out[0]));
	INV_X1B_A12TR INV_out_1(.A(nand_out[1]), .Y(decoder_out[1]));
	INV_X1B_A12TR INV_out_2(.A(nand_out[2]), .Y(decoder_out[2]));
	INV_X1B_A12TR INV_out_3(.A(nand_out[3]), .Y(decoder_out[3]));
	NAND2_X1A_A12TR NAND2_0(.A(in_not[1]), .B(in_not[0]), .Y(nand_out[0]));
	NAND2_X1A_A12TR NAND2_1(.A(in_not[1]), .B(decoder_in[0]), .Y(nand_out[1]));
	NAND2_X1A_A12TR NAND2_2(.A(decoder_in[1]), .B(in_not[0]), .Y(nand_out[2]));
	NAND2_X1A_A12TR NAND2_3(.A(decoder_in[1]), .B(decoder_in[0]), .Y(nand_out[3]));
	INV_X1B_A12TR in_0_not(.A(decoder_in[0]), .Y(in_not[0]));
	INV_X1B_A12TR in_1_not(.A(decoder_in[1]), .Y(in_not[1]));

endmodule


module Decoder_4_16 (decoder_in, decoder_out);

	//ports
	input [3:0] decoder_in;
	output [15:0] decoder_out;

	//wires
	wire [3:0] decoder_in;
	wire [15:0] decoder_out;

	//instances

endmodule


module bitslice (DGWCLK, DIN, DOUT, RWL, clk);

	//ports
	input [15:0] DGWCLK;
	input clk;
	input [15:0] RWL;
	input DIN;
	output DOUT;

	//wires
	wire clk;
	wire [15:0] DGWCLK;
	wire DOUT;
	wire GDIN;
	wire [15:0] RWL;
	wire [15:0] MemoryLatch;
	wire DIN;

	//instances
	DFFQ_X2M_A12TR GDIN_reg(.CK(clk), .D(DIN), .Q(GDIN));
	LATQ_X1M_A12TR MemoryLatch_reg_0(.D(GDIN), .G(DGWCLK[0]), .Q(MemoryLatch[0]));
	LATQ_X1M_A12TR MemoryLatch_reg_1(.D(GDIN), .G(DGWCLK[1]), .Q(MemoryLatch[1]));
	LATQ_X1M_A12TR MemoryLatch_reg_10(.D(GDIN), .G(DGWCLK[10]), .Q(MemoryLatch[10]));
	LATQ_X1M_A12TR MemoryLatch_reg_11(.D(GDIN), .G(DGWCLK[11]), .Q(MemoryLatch[11]));
	LATQ_X1M_A12TR MemoryLatch_reg_12(.D(GDIN), .G(DGWCLK[12]), .Q(MemoryLatch[12]));
	LATQ_X1M_A12TR MemoryLatch_reg_13(.D(GDIN), .G(DGWCLK[13]), .Q(MemoryLatch[13]));
	LATQ_X1M_A12TR MemoryLatch_reg_14(.D(GDIN), .G(DGWCLK[14]), .Q(MemoryLatch[14]));
	LATQ_X1M_A12TR MemoryLatch_reg_15(.D(GDIN), .G(DGWCLK[15]), .Q(MemoryLatch[15]));
	LATQ_X1M_A12TR MemoryLatch_reg_2(.D(GDIN), .G(DGWCLK[2]), .Q(MemoryLatch[2]));
	LATQ_X1M_A12TR MemoryLatch_reg_3(.D(GDIN), .G(DGWCLK[3]), .Q(MemoryLatch[3]));
	LATQ_X1M_A12TR MemoryLatch_reg_4(.D(GDIN), .G(DGWCLK[4]), .Q(MemoryLatch[4]));
	LATQ_X1M_A12TR MemoryLatch_reg_5(.D(GDIN), .G(DGWCLK[5]), .Q(MemoryLatch[5]));
	LATQ_X1M_A12TR MemoryLatch_reg_6(.D(GDIN), .G(DGWCLK[6]), .Q(MemoryLatch[6]));
	LATQ_X1M_A12TR MemoryLatch_reg_7(.D(GDIN), .G(DGWCLK[7]), .Q(MemoryLatch[7]));
	LATQ_X1M_A12TR MemoryLatch_reg_8(.D(GDIN), .G(DGWCLK[8]), .Q(MemoryLatch[8]));
	LATQ_X1M_A12TR MemoryLatch_reg_9(.D(GDIN), .G(DGWCLK[9]), .Q(MemoryLatch[9]));
	read_mux read_mux(.DOUT(DOUT), .MemoryLatch({MemoryLatch[15:0]}), .RWL({RWL[15:0]}));

endmodule


module welltap_strip ();

	//instances
	WELLANTENNATIEPW2_A12TR welltap_0();
	WELLANTENNATIEPW2_A12TR welltap_1();
	WELLANTENNATIEPW2_A12TR welltap_10();
	WELLANTENNATIEPW2_A12TR welltap_11();
	WELLANTENNATIEPW2_A12TR welltap_12();
	WELLANTENNATIEPW2_A12TR welltap_13();
	WELLANTENNATIEPW2_A12TR welltap_14();
	WELLANTENNATIEPW2_A12TR welltap_15();
	WELLANTENNATIEPW2_A12TR welltap_2();
	WELLANTENNATIEPW2_A12TR welltap_3();
	WELLANTENNATIEPW2_A12TR welltap_4();
	WELLANTENNATIEPW2_A12TR welltap_5();
	WELLANTENNATIEPW2_A12TR welltap_6();
	WELLANTENNATIEPW2_A12TR welltap_7();
	WELLANTENNATIEPW2_A12TR welltap_8();
	WELLANTENNATIEPW2_A12TR welltap_9();

endmodule


module scm65 (CLK, DIN, DOUT, RADDR, RE, SE, WADDR, WE);

	//ports
	input [3:0] RADDR;
	input [3:0] WADDR;
	input RE;
	input [15:0] DIN;
	input SE;
	input WE;
	output [15:0] DOUT;
	input CLK;

	//wires
	wire GRCLK;
	wire GWCLK;
	wire [15:0] DGWCLKLeftNet;
	wire WE;
	wire [15:0] rwlBuffNet_2;
	wire GDINCLK;
	wire [15:0] rwlBuffNet_1;
	wire CLK;
	wire SE;
	wire [15:0] rwlBuffNet_3;
	wire [15:0] decoder_read_out;
	wire [15:0] DGWClkRightNet;
	wire [15:0] decoder_write_out;
	wire [15:0] DIN;
	wire [15:0] rwlBuffNet_0;
	wire [3:0] RADDR;
	wire [3:0] WADDR;
	wire RE;
	wire [15:0] DOUT;

	//instances
	PREICG_X0P5B_A12TR GDINCLK_gate(.CK(CLK), .E(WE), .ECK(GDINCLK), .SE(SE));
	PREICG_X0P5B_A12TR GRCLK_gate(.CK(CLK), .E(RE), .ECK(GRCLK), .SE(SE));
	PREICG_X0P5B_A12TR GWCLK_gate(.CK(CLK), .E(WE), .ECK(GWCLK), .SE(SE));
	MidGap_DGWCLK MidGap_DGWCLK(.DGWClkLeftNet({DGWCLKLeftNet[15:0]}), .DGWClkRightNet({DGWClkRightNet[15:0]}),
	.E({decoder_write_out[15:0]}), .SE(SE), .clk(GWCLK));
	bitslice bitslice_0(.DGWCLK({DGWCLKLeftNet[15:0]}), .DIN(DIN[0]), .DOUT(DOUT[0]),
	.RWL({rwlBuffNet_0[15:0]}), .clk(GDINCLK));
	bitslice bitslice_1(.DGWCLK({DGWCLKLeftNet[15:0]}), .DIN(DIN[1]), .DOUT(DOUT[1]),
	.RWL({rwlBuffNet_0[15:0]}), .clk(GDINCLK));
	bitslice bitslice_10(.DGWCLK({DGWClkRightNet[15:0]}), .DIN(DIN[10]), .DOUT(DOUT[10]),
	.RWL({rwlBuffNet_2[15:0]}), .clk(GDINCLK));
	bitslice bitslice_11(.DGWCLK({DGWClkRightNet[15:0]}), .DIN(DIN[11]), .DOUT(DOUT[11]),
	.RWL({rwlBuffNet_2[15:0]}), .clk(GDINCLK));
	bitslice bitslice_12(.DGWCLK({DGWClkRightNet[15:0]}), .DIN(DIN[12]), .DOUT(DOUT[12]),
	.RWL({rwlBuffNet_3[15:0]}), .clk(GDINCLK));
	bitslice bitslice_13(.DGWCLK({DGWClkRightNet[15:0]}), .DIN(DIN[13]), .DOUT(DOUT[13]),
	.RWL({rwlBuffNet_3[15:0]}), .clk(GDINCLK));
	bitslice bitslice_14(.DGWCLK({DGWClkRightNet[15:0]}), .DIN(DIN[14]), .DOUT(DOUT[14]),
	.RWL({rwlBuffNet_3[15:0]}), .clk(GDINCLK));
	bitslice bitslice_15(.DGWCLK({DGWClkRightNet[15:0]}), .DIN(DIN[15]), .DOUT(DOUT[15]),
	.RWL({rwlBuffNet_3[15:0]}), .clk(GDINCLK));
	bitslice bitslice_2(.DGWCLK({DGWCLKLeftNet[15:0]}), .DIN(DIN[2]), .DOUT(DOUT[2]),
	.RWL({rwlBuffNet_0[15:0]}), .clk(GDINCLK));
	bitslice bitslice_3(.DGWCLK({DGWCLKLeftNet[15:0]}), .DIN(DIN[3]), .DOUT(DOUT[3]),
	.RWL({rwlBuffNet_0[15:0]}), .clk(GDINCLK));
	bitslice bitslice_4(.DGWCLK({DGWCLKLeftNet[15:0]}), .DIN(DIN[4]), .DOUT(DOUT[4]),
	.RWL({rwlBuffNet_1[15:0]}), .clk(GDINCLK));
	bitslice bitslice_5(.DGWCLK({DGWCLKLeftNet[15:0]}), .DIN(DIN[5]), .DOUT(DOUT[5]),
	.RWL({rwlBuffNet_1[15:0]}), .clk(GDINCLK));
	bitslice bitslice_6(.DGWCLK({DGWCLKLeftNet[15:0]}), .DIN(DIN[6]), .DOUT(DOUT[6]),
	.RWL({rwlBuffNet_1[15:0]}), .clk(GDINCLK));
	bitslice bitslice_7(.DGWCLK({DGWCLKLeftNet[15:0]}), .DIN(DIN[7]), .DOUT(DOUT[7]),
	.RWL({rwlBuffNet_1[15:0]}), .clk(GDINCLK));
	bitslice bitslice_8(.DGWCLK({DGWClkRightNet[15:0]}), .DIN(DIN[8]), .DOUT(DOUT[8]),
	.RWL({rwlBuffNet_2[15:0]}), .clk(GDINCLK));
	bitslice bitslice_9(.DGWCLK({DGWClkRightNet[15:0]}), .DIN(DIN[9]), .DOUT(DOUT[9]),
	.RWL({rwlBuffNet_2[15:0]}), .clk(GDINCLK));
	row_decoder read_decoder(.decoder_in({RADDR[3:0]}), .decoder_out({decoder_read_out[15:0]}));
	rwlBuff_strip rwlBuff_strip_0(.IN({rwlBuffNet_1[15:0]}), .OUT({rwlBuffNet_0[15:0]}));
	rwlBuff_strip rwlBuff_strip_1(.IN({decoder_read_out[15:0]}), .OUT({rwlBuffNet_1[15:0]}));
	rwlBuff_strip rwlBuff_strip_2(.IN({decoder_read_out[15:0]}), .OUT({rwlBuffNet_2[15:0]}));
	rwlBuff_strip rwlBuff_strip_3(.IN({rwlBuffNet_2[15:0]}), .OUT({rwlBuffNet_3[15:0]}));
	welltap_strip welltap_strip_0();
	welltap_strip welltap_strip_1();
	row_decoder write_decoder(.decoder_in({WADDR[3:0]}), .decoder_out({decoder_write_out[15:0]}));

endmodule


module MidGap_DGWCLK (DGWClkLeftNet, DGWClkRightNet, E, SE, clk);

	//ports
	input clk;
	output [15:0] DGWClkRightNet;
	input [15:0] E;
	input SE;
	output [15:0] DGWClkLeftNet;

	//wires
	wire clk;
	wire [15:0] ECK;
	wire [15:0] DGWClkRightNet;
	wire [15:0] E;
	wire SE;
	wire [15:0] DGWClkLeftNet;

	//instances
	PREICG_X0P5B_A12TR DGWCLK_gate_0(.CK(clk), .E(E[0]), .ECK(ECK[0]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_1(.CK(clk), .E(E[1]), .ECK(ECK[1]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_10(.CK(clk), .E(E[10]), .ECK(ECK[10]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_11(.CK(clk), .E(E[11]), .ECK(ECK[11]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_12(.CK(clk), .E(E[12]), .ECK(ECK[12]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_13(.CK(clk), .E(E[13]), .ECK(ECK[13]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_14(.CK(clk), .E(E[14]), .ECK(ECK[14]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_15(.CK(clk), .E(E[15]), .ECK(ECK[15]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_2(.CK(clk), .E(E[2]), .ECK(ECK[2]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_3(.CK(clk), .E(E[3]), .ECK(ECK[3]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_4(.CK(clk), .E(E[4]), .ECK(ECK[4]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_5(.CK(clk), .E(E[5]), .ECK(ECK[5]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_6(.CK(clk), .E(E[6]), .ECK(ECK[6]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_7(.CK(clk), .E(E[7]), .ECK(ECK[7]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_8(.CK(clk), .E(E[8]), .ECK(ECK[8]), .SE(SE));
	PREICG_X0P5B_A12TR DGWCLK_gate_9(.CK(clk), .E(E[9]), .ECK(ECK[9]), .SE(SE));
	BUFH_X3M_A12TR DGWClkLeftBuff_0(.A(ECK[0]), .Y(DGWClkLeftNet[0]));
	BUFH_X3M_A12TR DGWClkLeftBuff_1(.A(ECK[1]), .Y(DGWClkLeftNet[1]));
	BUFH_X3M_A12TR DGWClkLeftBuff_10(.A(ECK[10]), .Y(DGWClkLeftNet[10]));
	BUFH_X3M_A12TR DGWClkLeftBuff_11(.A(ECK[11]), .Y(DGWClkLeftNet[11]));
	BUFH_X3M_A12TR DGWClkLeftBuff_12(.A(ECK[12]), .Y(DGWClkLeftNet[12]));
	BUFH_X3M_A12TR DGWClkLeftBuff_13(.A(ECK[13]), .Y(DGWClkLeftNet[13]));
	BUFH_X3M_A12TR DGWClkLeftBuff_14(.A(ECK[14]), .Y(DGWClkLeftNet[14]));
	BUFH_X3M_A12TR DGWClkLeftBuff_15(.A(ECK[15]), .Y(DGWClkLeftNet[15]));
	BUFH_X3M_A12TR DGWClkLeftBuff_2(.A(ECK[2]), .Y(DGWClkLeftNet[2]));
	BUFH_X3M_A12TR DGWClkLeftBuff_3(.A(ECK[3]), .Y(DGWClkLeftNet[3]));
	BUFH_X3M_A12TR DGWClkLeftBuff_4(.A(ECK[4]), .Y(DGWClkLeftNet[4]));
	BUFH_X3M_A12TR DGWClkLeftBuff_5(.A(ECK[5]), .Y(DGWClkLeftNet[5]));
	BUFH_X3M_A12TR DGWClkLeftBuff_6(.A(ECK[6]), .Y(DGWClkLeftNet[6]));
	BUFH_X3M_A12TR DGWClkLeftBuff_7(.A(ECK[7]), .Y(DGWClkLeftNet[7]));
	BUFH_X3M_A12TR DGWClkLeftBuff_8(.A(ECK[8]), .Y(DGWClkLeftNet[8]));
	BUFH_X3M_A12TR DGWClkLeftBuff_9(.A(ECK[9]), .Y(DGWClkLeftNet[9]));
	BUFH_X3M_A12TR DGWClkRightBuff_0(.A(ECK[0]), .Y(DGWClkRightNet[0]));
	BUFH_X3M_A12TR DGWClkRightBuff_1(.A(ECK[1]), .Y(DGWClkRightNet[1]));
	BUFH_X3M_A12TR DGWClkRightBuff_10(.A(ECK[10]), .Y(DGWClkRightNet[10]));
	BUFH_X3M_A12TR DGWClkRightBuff_11(.A(ECK[11]), .Y(DGWClkRightNet[11]));
	BUFH_X3M_A12TR DGWClkRightBuff_12(.A(ECK[12]), .Y(DGWClkRightNet[12]));
	BUFH_X3M_A12TR DGWClkRightBuff_13(.A(ECK[13]), .Y(DGWClkRightNet[13]));
	BUFH_X3M_A12TR DGWClkRightBuff_14(.A(ECK[14]), .Y(DGWClkRightNet[14]));
	BUFH_X3M_A12TR DGWClkRightBuff_15(.A(ECK[15]), .Y(DGWClkRightNet[15]));
	BUFH_X3M_A12TR DGWClkRightBuff_2(.A(ECK[2]), .Y(DGWClkRightNet[2]));
	BUFH_X3M_A12TR DGWClkRightBuff_3(.A(ECK[3]), .Y(DGWClkRightNet[3]));
	BUFH_X3M_A12TR DGWClkRightBuff_4(.A(ECK[4]), .Y(DGWClkRightNet[4]));
	BUFH_X3M_A12TR DGWClkRightBuff_5(.A(ECK[5]), .Y(DGWClkRightNet[5]));
	BUFH_X3M_A12TR DGWClkRightBuff_6(.A(ECK[6]), .Y(DGWClkRightNet[6]));
	BUFH_X3M_A12TR DGWClkRightBuff_7(.A(ECK[7]), .Y(DGWClkRightNet[7]));
	BUFH_X3M_A12TR DGWClkRightBuff_8(.A(ECK[8]), .Y(DGWClkRightNet[8]));
	BUFH_X3M_A12TR DGWClkRightBuff_9(.A(ECK[9]), .Y(DGWClkRightNet[9]));

endmodule
